name: terraform plan

on:
  workflow_dispatch:
    inputs:
      dir: 
        type: string
        description: "working directory"
        required: true

      terraform_version: 
        description: 'Terraform Version'
        required: true
        default: 1.10.4

permissions:
  packages: write
  contents: write
  pull-requests: write

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  GITHUB_PR_TITLE: "[terraform/IAC] ${{ inputs.dir }}"

jobs:
  terraform-plan:
    runs-on: ubuntu-latest
    name: ${{ matrix.images.name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: sersoft-gmbh/setup-gh-cli-action@v2
        with:
          version: latest

      - uses: nxtcoder17/actions/pull-request-create@feat/tf-issues-and-pr
        id: pr
        with:
          github_token: ${{ env.GITHUB_TOKEN }}
          title: ${{ env.GITHUB_PR_TITLE }}
          body: "this PR once merged, audits, and tracks the terraform IAC changes"

      - uses: nxtcoder17/actions/terraform-plan@feat/tf-issues-and-pr
        with:
          github_token: ${{ env.GITHUB_TOKEN }}
          working_directory: ${{ inputs.dir }}
          terraform_version: ${{ inputs.terraform_version  }}
          pr_number: ${{ steps.pr.outputs.PR_NUMBER }}

      # - name: create a PR related to this
      #   id: pr
      #   shell: bash
      #   run: |+
      #     gh --version
      #     gh pr list --json title,number,id -q "map(select(.title == \"$GITHUB_PR_TITLE\")) | first | .number // \"Not Found\"" > pr_number.txt
      #     gh pr list --json title,number,id -q "map(select(.title == \"$GITHUB_PR_TITLE\")) | first | .id // \"Not Found\"" > pr_id.txt
      #
      #     test "$pr" = "Not Found" && echo "creating new PR" && gh pr create --title "$GITHUB_PR_TITLE" --body "this PR once merged, audits, and tracks the terraform IAC changes"
      #
      #     gh pr list --json title,number,id -q "map(select(.title == \"$GITHUB_PR_TITLE\")) | first | .number // \"Not Found\"" > pr_number.txt
      #     gh pr list --json title,number,id -q "map(select(.title == \"$GITHUB_PR_TITLE\")) | first | .id // \"Not Found\"" > pr_id.txt
      #     pr_number=$(cat pr_number.txt)
      #     pr_id=$(cat pr_id.txt)
      #
      #     echo "PR_ID: $pr_id | PR_NUMBER: $pr_number"
      #     echo "pr_id=$pr_id" >> $GITHUB_OUTPUT
      #     echo "pr_number=$pr_number" >> $GITHUB_OUTPUT
      #
      # - name: Setup Terraform
      #   uses: hashicorp/setup-terraform@v3
      #   with:
      #     terraform_version: ${{ inputs.terraform_version }}
      #     terraform_wrapper: false
      #
      # - name: Terraform Init
      #   id: init
      #   working-directory: ${{ inputs.dir }}
      #   shell: bash
      #   run: |
      #     terraform init -reconfigure
      #
      # - name: Terraform Plan
      #   id: plan
      #   working-directory: ${{ inputs.dir }}
      #   shell: bash
      #   run: |
      #     plan_dir="$PWD/.out"
      #     mkdir $plan_dir
      #     echo 'plan<<EOF' >> $GITHUB_OUTPUT
      #     terraform plan -no-color -out=$plan_dir/tfplan >> $GITHUB_OUTPUT
      #     echo 'EOF' >> $GITHUB_OUTPUT
      #
      #     echo "${{ inputs.dir }}" > $plan_dir/working-dir
      #
      #     echo "plan_dir=$plan_dir"
      #     ls -al $plan_dir
      #
      #     echo "PLAN_DIR=$plan_dir" | tee -a $GITHUB_ENV | tee -a $GITHUB_OUTPUT
      #
      # - name: Save Artifact
      #   id: save-artifact
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: ${{ steps.pr.outputs.pr_number }}-tf
      #     github_token: ${{ secrets.GITHUB_TOKEN }}
      #     path: |
      #       ${{ steps.plan.outputs.PLAN_DIR }}/tfplan
      #       ${{ steps.plan.outputs.PLAN_DIR }}/working-dir
      #
      # - name: Comment Plan
      #   id: comment-plan
      #   uses: peter-evans/create-or-update-comment@v2
      #   with:
      #     token: ${{ env.GITHUB_TOKEN }}
      #     issue-number: ${{ steps.pr.outputs.pr_number }}
      #     body: |
      #       Terraform Plan:
      #
      #       ```
      #       ${{ steps.plan.outputs.plan }}
      #       ```
      #
      #       Plan has been saved to GH artifacts.
