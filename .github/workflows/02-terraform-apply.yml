name: terraform apply

on:
  pull_request_review:
    types: [submitted]

  workflow_dispatch:
    inputs:
      pr_number:
        type: int
        description: "PR number"
        required: true

      terraform_version: 
        description: 'Terraform Version'
        required: true
        default: 1.10.4

permissions:
  packages: write
  contents: write
  pull-requests: write

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  terraform-apply:
    runs-on: ubuntu-latest
    if: github.event.review.state == 'approved' ||  github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Fail Workflow if secrets not defined
        shell: bash
        run: |
          if [ -z "${{ secrets.ENCRYPTION_PASSWORD }}" ]; then
            echo "Error: secret ENCRYPTION_PASSWORD is missing. This secret must be set, to decrypt the downloaded terraform plan file" >&2
            exit 1
          fi

      - name: Get PR Branch
        uses: nxtcoder17/actions/pull-request-branch@feat/tf-issues-and-pr
        id: pr
        with:
          github_token: ${{ env.GITHUB_TOKEN }}
          # inputs.pr_number will only be set, when using workflow-dispatch
          pull_request_number: ${{ inputs.pr_number }}

      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.pr.outputs.PR_BRANCH }}

      - name: Download Created Plan
        uses: nxtcoder17/actions/download-workflow-artifact@feat/tf-issues-and-pr
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          workflow_name: 01-terraform-plan.yml
          artifact_name: ${{ steps.pr.outputs.PR_NUMBER }}-tf
          destination: ".tfplan"

      - name: Decrypt Downloaded Terraform Plan file
        shell: bash
        id: plan-output
        run: |
          pushd .tfplan
          openssl enc -d -aes-256-cbc -pbkdf2 -iter 600000 -in tfplan -out "tfplan.dec" -pass pass:"${{ secrets.ENCRYTPTION_PASSWORD }}"
          mv tfplan.dec tfplan
          popd
          echo "TF_WORKING_DIR=$(cat .tfplan/tf-working-dir)" | tee -a $GITHUB_ENV

      - name: Decrypt terraform state (if present)
        shell: bash
        run: |
          pushd ${{ env.TF_WORKING_DIR }}

          if [ -f terraform.tfstate ]; then
            openssl enc -d -aes-256-cbc -pbkdf2 -iter 600000 -in terraform.tfstate -out "terraform.tfstate.dec" -pass pass:"${{ secrets.ENCRYTPTION_PASSWORD }}"
            mv terraform.tfstate.dec terraform.tfstate
          fi
          popd

      - name: Terraform Apply
        uses: nxtcoder17/actions/terraform-apply@feat/tf-issues-and-pr
        id: apply
        with:
          terraform_version: ${{ inputs.terraform_version }}
          working_directory: ${{ env.TF_WORKING_DIR }}
          plan_file: .tfplan/tfplan

      - name: Encrypt terraform state
        shell: bash
        run: |
          pushd ${{ env.TF_WORKING_DIR }}
          # aes-256-gcm did not work
          openssl enc -aes-256-cbc -pbkdf2 -iter 600000 -in terraform.tfstate -out "terraform.tfstate.enc" -pass pass:"${{ secrets.ENCRYTPTION_PASSWORD }}"
          mv terraform.tfstate.enc terraform.tfstate
          popd

        # Step 6: Pushing Encrypted State File Back to PR Branch
      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Commit and Push Encrypted State File
        run: |
          git add ${{ env.TF_WORKING_DIR }}/terraform.tfstate
          git commit -m "Update encrypted Terraform state file"
          git push origin "${{ github.event.pull_request.head.ref }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Comment on PR
        uses: nxtcoder17/actions/issue-comment@feat/tf-issues-and-pr
        with:
          github_token: ${{ inputs.GITHUB_TOKEN }}
          issue_number: ${{ steps.pr.outputs.PR_NUMBER }}
          body: |
            Terraform Apply:

            ```
            ${{ steps.apply.outputs.TF_APPLY_STDOUT }}
            ```
